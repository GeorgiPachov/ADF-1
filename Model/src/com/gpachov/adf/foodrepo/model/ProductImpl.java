package com.gpachov.adf.foodrepo.model;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 11 01:33:22 EEST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProductImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ProductId,
        Name,
        CaloriesPerGram,
        GramsPerUnit,
        ProductEntryId,
        ProductEntries;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int PRODUCTID = AttributesEnum.ProductId.index();
    public static final int NAME = AttributesEnum.Name.index();
    public static final int CALORIESPERGRAM = AttributesEnum.CaloriesPerGram.index();
    public static final int GRAMSPERUNIT = AttributesEnum.GramsPerUnit.index();
    public static final int PRODUCTENTRYID = AttributesEnum.ProductEntryId.index();
    public static final int PRODUCTENTRIES = AttributesEnum.ProductEntries.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ProductImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("com.gpachov.adf.foodrepo.model.Product");
    }

    /**
     * Gets the attribute value for ProductId, using the alias name ProductId.
     * @return the value of ProductId
     */
    public Long getProductId() {
        return (Long) getAttributeInternal(PRODUCTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductId.
     * @param value value to set the ProductId
     */
    public void setProductId(Long value) {
        setAttributeInternal(PRODUCTID, value);
    }

    /**
     * Gets the attribute value for Name, using the alias name Name.
     * @return the value of Name
     */
    public String getName() {
        return (String) getAttributeInternal(NAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for Name.
     * @param value value to set the Name
     */
    public void setName(String value) {
        setAttributeInternal(NAME, value);
    }

    /**
     * Gets the attribute value for CaloriesPerGram, using the alias name CaloriesPerGram.
     * @return the value of CaloriesPerGram
     */
    public Long getCaloriesPerGram() {
        return (Long) getAttributeInternal(CALORIESPERGRAM);
    }

    /**
     * Sets <code>value</code> as the attribute value for CaloriesPerGram.
     * @param value value to set the CaloriesPerGram
     */
    public void setCaloriesPerGram(Long value) {
        setAttributeInternal(CALORIESPERGRAM, value);
    }

    /**
     * Gets the attribute value for GramsPerUnit, using the alias name GramsPerUnit.
     * @return the value of GramsPerUnit
     */
    public BigDecimal getGramsPerUnit() {
        return (BigDecimal) getAttributeInternal(GRAMSPERUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for GramsPerUnit.
     * @param value value to set the GramsPerUnit
     */
    public void setGramsPerUnit(BigDecimal value) {
        setAttributeInternal(GRAMSPERUNIT, value);
    }

    /**
     * Gets the attribute value for ProductEntryId, using the alias name ProductEntryId.
     * @return the value of ProductEntryId
     */
    public BigDecimal getProductEntryId() {
        return (BigDecimal) getAttributeInternal(PRODUCTENTRYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductEntryId.
     * @param value value to set the ProductEntryId
     */
    public void setProductEntryId(BigDecimal value) {
        setAttributeInternal(PRODUCTENTRYID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getProductEntries() {
        return (RowIterator) getAttributeInternal(PRODUCTENTRIES);
    }


    /**
     * @param productId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long productId) {
        return new Key(new Object[] { productId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

